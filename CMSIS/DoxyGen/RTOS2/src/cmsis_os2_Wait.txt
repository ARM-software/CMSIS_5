
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
//  ==== Generic Wait Functions ====
/** 
\addtogroup CMSIS_RTOS_Wait Generic Wait Functions
\ingroup CMSIS_RTOS
\brief Wait for a time period or unspecified events.
\details 
The Generic Wait function group provides means for a time delay and allow to wait for unspecified events.

@{
*/
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/** \def osWaitForever
Wait forever timeout value. 

Reference: 
 - \ref osDelay
 - \ref osDelayUntil
*/
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/** 
\fn osStatus_t osDelay (uint32_t millisec);
\details
Wait for a specified time period in \a millisec.

The \ref CMSIS_RTOS_TimeOutValue "millisec" value is converted to a number of timer ticks and is therefore an upper bound. The
exact time delay depends on the actual time elapsed since the last timer tick. 

For a value of <b>1</b>, the system waits until the next timer tick occurs. That means that the actual time delay may be up
to one timer tick less.

<b>\ref CMSIS_RTOS_Status</b>\n
 - \em osEventTimeout: the time delay is executed.
 - \em osErrorISR: \ref osDelay cannot be called from interrupt service routines.

\note Cannot be called from \ref CMSIS_RTOS_ISR_Calls "Interrupt Service Routines".
 
<b>Code Example</b>
\code
#include "cmsis_os2.h"
 
void *Thread_1 (void *arg)  {               // Thread function
  osStatus_t status;                               // capture the return status
  uint32_t   delayTime;                            // delay time in milliseconds
 
  delayTime = 1000;                              // delay 1 second
  status = osDelay (delayTime);                  // suspend thread execution
  if (status != osOK) {
    // handle error code
  }  
}
\endcode
*/ 
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/** 
\fn osStatus_t osDelayUntil (uint64_t millisec)
\details
Wait until an absolute time - specified in millisec - is reached. 

The \ref CMSIS_RTOS_TimeOutValue "millisec" value is converted to a number of timer ticks and is therefore an upper bound. The
exact time delay depends on the actual time elapsed since the last timer tick. 

\ref osKernelGetTime can be used to retrieve the current elapsed time of the kernel in millisec.

<b>\ref CMSIS_RTOS_Status</b>\n
 - \em osEventTimeout: the time delay is executed.
 - \em osErrorISR: \ref osDelayUntil cannot be called from interrupt service routines.

\note Cannot be called from \ref CMSIS_RTOS_ISR_Calls "Interrupt Service Routines". 

<b>Code Example</b>
\code
#include "cmsis_os2.h"
 
void *Thread_1 (void *arg)  {               // Thread function
  osStatus_t status;                               // capture the return status
  uint32_t   delayTime;                            // delay time in milliseconds
 
  delayTime = osKernelGetTime() + 2000;          // 2 seconds from now.
  status = osDelay (delayTime);                  // suspend thread execution
  if (status != osOK) {
    // handle error code
  }  
}
\endcode
*/
/// @}
